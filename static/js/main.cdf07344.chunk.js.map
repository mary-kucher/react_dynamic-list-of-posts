{"version":3,"sources":["components/PostItem.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/CommentItem.tsx","utils/fetchClient.ts","types/ErrorValues.ts","components/PostDetails.tsx","api/CommentsService.ts","components/UserSelector.tsx","hooks/useOutsideClick.ts","App.tsx","api/UserService.ts","api/PostService.ts","index.tsx"],"names":["PostItem","post","setIsPostOpen","isPostOpen","id","title","className","type","classNames","onClick","postActive","PostsList","postsForView","map","Loader","NewCommentForm","handleAddingComment","isLoadingButton","useState","commentName","setCommentName","commentEmail","setCommentEmail","commentBody","setCommentBody","errorName","setErrorName","errorEmail","setErrorEmail","errorBody","setErrorBody","handlerOnChange","event","name","target","value","validationForm","data","trim","length","onSubmit","preventDefault","hasNameError","hasEmailError","hasBodyError","htmlFor","placeholder","onChange","CommentItem","comment","handleRemoveComment","href","email","body","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","options","JSON","stringify","headers","then","fetch","response","ok","Error","statusText","json","ErrorValues","client","PostDetails","setErrorMessage","errorMessage","openNewCommentForm","setOpenNewCommentForm","isLoading","setIsLoading","setIsLoadingButton","commentsForView","setCommentsForView","useEffect","postId","catch","CommentsError","finally","commentId","prevComments","filter","DeletingComment","newComment","res","AddingComment","UserSelector","usersFromServer","setSelectedUser","selectedUser","showDropdownMenu","setShowDropdownMenu","handlerShowUsersList","prevState","ref","callback","useRef","React","handleClick","current","contains","document","addEventListener","removeEventListener","useOutsideClick","role","user","App","setUsersFromServer","isLoadingPosts","setIsLoadingPosts","setPostsForView","userId","LoadingPosts","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.cdf07344.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  post: Post;\n  setIsPostOpen: (post: Post | null) => void;\n  isPostOpen: Post | null;\n};\n\nexport const PostItem: React.FC<Props> = ({\n  post,\n  setIsPostOpen,\n  isPostOpen,\n}) => {\n  const {\n    id,\n    title,\n  } = post;\n  const handlePostButton = (postActive: Post) => {\n    if (!isPostOpen || postActive !== isPostOpen) {\n      setIsPostOpen(postActive);\n    } else {\n      setIsPostOpen(null);\n    }\n  };\n\n  return (\n    <tr data-cy=\"Post\">\n      <td data-cy=\"PostId\">{id}</td>\n      <td data-cy=\"PostTitle\">\n        {title}\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={classNames('button is-link',\n            { 'is-light': isPostOpen?.id !== id })}\n          onClick={() => handlePostButton(post)}\n        >\n          {\n            isPostOpen?.id === id ? 'Close' : 'Open'\n          }\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Post } from '../types/Post';\nimport { PostItem } from './PostItem';\n\ntype Props = {\n  postsForView: Post[];\n  setIsPostOpen: (post: Post | null) => void;\n  isPostOpen: Post | null;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  postsForView,\n  setIsPostOpen,\n  isPostOpen,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            postsForView.map(post => (\n              <PostItem\n                key={post.id}\n                post={post}\n                isPostOpen={isPostOpen}\n                setIsPostOpen={setIsPostOpen}\n              />\n            ))\n          }\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  handleAddingComment: (\n    commentName: string,\n    commentEmail: string,\n    commentBody: string,\n  ) => void;\n  isLoadingButton: boolean,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  handleAddingComment,\n  isLoadingButton,\n}) => {\n  const [commentName, setCommentName] = useState('');\n  const [commentEmail, setCommentEmail] = useState('');\n  const [commentBody, setCommentBody] = useState('');\n  const [errorName, setErrorName] = useState(false);\n  const [errorEmail, setErrorEmail] = useState(false);\n  const [errorBody, setErrorBody] = useState(false);\n\n  const handlerOnChange = (event: React.ChangeEvent<HTMLInputElement |\n  HTMLTextAreaElement>, name: string) => {\n    // eslint-disable-next-line default-case\n    switch (name) {\n      case 'name':\n        setCommentName(event.target.value);\n        setErrorName(false);\n\n        return;\n      case 'email':\n        setCommentEmail(event.target.value);\n        setErrorEmail(false);\n\n        return;\n      case 'body':\n        setCommentBody(event.target.value);\n        setErrorBody(false);\n    }\n  };\n\n  const validationForm = (data: string) => {\n    return data.trim().length === 0;\n  };\n\n  const handlerOnSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const hasNameError = validationForm(commentName);\n    const hasEmailError = validationForm(commentEmail);\n    const hasBodyError = validationForm(commentBody);\n\n    setErrorName(hasNameError);\n    setErrorEmail(hasEmailError);\n    setErrorBody(hasBodyError);\n\n    if (!hasNameError && !hasEmailError && !hasBodyError) {\n      handleAddingComment(commentName, commentEmail, commentBody);\n      setCommentBody('');\n    }\n  };\n\n  const handlerClearForm = () => {\n    setCommentBody('');\n    setCommentEmail('');\n    setCommentName('');\n    setErrorName(false);\n    setErrorEmail(false);\n    setErrorBody(false);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handlerOnSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input',\n              { 'is-danger': errorName })}\n            value={commentName}\n            onChange={(event) => handlerOnChange(event, event.target.name)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errorName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errorName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input',\n              { 'is-danger': errorEmail })}\n            value={commentEmail}\n            onChange={(event) => handlerOnChange(event, event.target.name)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errorEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errorEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea',\n              { 'is-danger': errorBody })}\n            value={commentBody}\n            onChange={(event) => handlerOnChange(event, event.target.name)}\n          />\n        </div>\n\n        {errorBody && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link',\n              { 'is-loading': isLoadingButton })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handlerClearForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  comment: Comment\n  handleRemoveComment: (id: number) => void,\n};\n\nexport const CommentItem: React.FC<Props> = ({\n  comment,\n  handleRemoveComment,\n}) => {\n  return (\n    <article\n      className=\"message is-small\"\n      data-cy=\"Comment\"\n      key={comment.id}\n    >\n      <div className=\"message-header\">\n        <a\n          href={`mailto:${comment.email}`}\n          data-cy=\"CommentAuthor\"\n        >\n          {comment.name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={() => handleRemoveComment(comment.id)}\n        />\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {comment.body}\n      </div>\n    </article>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n\n      return response;\n    })\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum ErrorValues {\n  AddingComment = 'Unable to add a comment',\n  DeletingComment = 'Unable to delete a comment',\n  LoadingPosts = 'Unable to load posts',\n  CommentsError = 'Something went wrong!',\n}\n","import React, { useEffect, useState } from 'react';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { CommentItem } from './CommentItem';\nimport {\n  addComments,\n  getComments,\n  removeComments,\n} from '../api/CommentsService';\nimport { ErrorValues } from '../types/ErrorValues';\n\ntype Props = {\n  isPostOpen: Post | null,\n  setErrorMessage: (message: ErrorValues | null) => void\n  errorMessage: ErrorValues | null,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  isPostOpen,\n  setErrorMessage,\n  errorMessage,\n}) => {\n  const [openNewCommentForm, setOpenNewCommentForm] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoadingButton, setIsLoadingButton] = useState(false);\n  const [commentsForView, setCommentsForView] = useState<Comment[] | []>([]);\n\n  const handleWriteNewComment = () => {\n    setOpenNewCommentForm(true);\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    if (isPostOpen) {\n      setIsLoading(true);\n      setOpenNewCommentForm(false);\n      getComments(isPostOpen?.id)\n        .then(setCommentsForView)\n        .catch(() => setErrorMessage(ErrorValues.CommentsError))\n        .finally(() => setIsLoading(false));\n    }\n  }, [isPostOpen]);\n\n  const handleRemoveComment = (id: number) => {\n    setErrorMessage(null);\n\n    removeComments(id)\n      .then(() => setCommentsForView(prevComments => prevComments\n        .filter(comment => comment.id !== id)))\n      .catch(() => setErrorMessage(ErrorValues.DeletingComment))\n      .finally(() => setErrorMessage(null));\n  };\n\n  const handleAddingComment = (\n    name: string,\n    email: string,\n    body: string,\n  ) => {\n    const newComment = {\n      postId: isPostOpen?.id,\n      name,\n      email,\n      body,\n    };\n\n    setIsLoadingButton(true);\n    // setErrorMessage(null);\n\n    addComments(newComment)\n      .then((res) => setCommentsForView(prevComments => [...prevComments, res]))\n      .catch(() => setErrorMessage(ErrorValues.AddingComment))\n      .finally(() => {\n        setIsLoadingButton(false);\n      });\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"block\">\n        {isPostOpen && (\n          <h2 data-cy=\"PostTitle\">\n            {`#${isPostOpen?.id}: ${isPostOpen?.title}`}\n          </h2>\n        )}\n\n        <p data-cy=\"PostBody\">\n          {isPostOpen?.body}\n        </p>\n      </div>\n      {isLoading\n        ? <Loader />\n        : (\n          <div className=\"block\">\n            {commentsForView.length <= 0 ? (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            ) : (\n              <>\n                <p className=\"title is-4\">Comments:</p>\n                {\n                  commentsForView.map(comment => (\n                    <CommentItem\n                      comment={comment}\n                      key={comment.id}\n                      handleRemoveComment={handleRemoveComment}\n                    />\n                  ))\n                }\n              </>\n            )}\n            {!openNewCommentForm && !errorMessage && (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={handleWriteNewComment}\n              >\n                Write a comment\n              </button>\n            )}\n          </div>\n        )}\n      {openNewCommentForm\n        && (\n          <NewCommentForm\n            handleAddingComment={handleAddingComment}\n            isLoadingButton={isLoadingButton}\n          />\n        )}\n\n      {errorMessage && (\n        <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n          {errorMessage}\n        </div>\n      )}\n    </div>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const removeComments = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const addComments = (data: {}) => {\n  return client.post<Comment>('/comments/', data);\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\nimport { useOutsideClick } from '../hooks/useOutsideClick';\n\ntype Props = {\n  usersFromServer: User[],\n  setSelectedUser: (user: User) => void,\n  selectedUser: User | null,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  usersFromServer,\n  setSelectedUser,\n  selectedUser,\n}) => {\n  const [showDropdownMenu, setShowDropdownMenu] = useState(false);\n\n  const handlerShowUsersList = () => {\n    setShowDropdownMenu(prevState => !prevState);\n  };\n\n  const handlerSelectUser = (userForSelect: User) => {\n    setSelectedUser(userForSelect);\n    handlerShowUsersList();\n  };\n\n  const handleClickOutside = () => {\n    setShowDropdownMenu(false);\n  };\n\n  const ref = useOutsideClick(handleClickOutside);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': showDropdownMenu })}\n      ref={ref}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handlerShowUsersList}\n        >\n          <span>{selectedUser?.name || 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {\n            usersFromServer.map(user => (\n              <a\n                key={user.id}\n                href={`#user-${user.id}`}\n                className={\n                  classNames('dropdown-item',\n                    { 'is-active': user.id === selectedUser?.id })\n                }\n                onClick={() => handlerSelectUser(user)}\n              >\n                {user.name}\n              </a>\n            ))\n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useRef } from 'react';\n\nexport const useOutsideClick = (callback: () => void) => {\n  const ref = useRef<HTMLDivElement>(null);\n\n  React.useEffect(() => {\n    const handleClick = (event: React.MouseEvent) => {\n      if (ref.current && !ref.current.contains(event.target as Node)) {\n        callback();\n      }\n    };\n\n    document.addEventListener('click', handleClick as unknown as EventListener);\n\n    return () => {\n      document.removeEventListener('click',\n        handleClick as unknown as EventListener);\n    };\n  }, [ref]);\n\n  return ref;\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { getUsers } from './api/UserService';\nimport { User } from './types/User';\nimport { getPosts } from './api/PostService';\nimport { Post } from './types/Post';\nimport { Loader } from './components/Loader';\nimport { ErrorValues } from './types/ErrorValues';\n\nexport const App: React.FC = () => {\n  const [usersFromServer, setUsersFromServer] = useState<User[] | []>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isPostOpen, setIsPostOpen] = useState<Post | null>(null);\n  const [isLoadingPosts, setIsLoadingPosts] = useState(false);\n  const [postsForView, setPostsForView] = useState<Post[] | []>([]);\n  const [errorMessage, setErrorMessage]\n    = useState<ErrorValues | null>(null);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsersFromServer);\n  }, []);\n\n  useEffect(() => {\n    setIsPostOpen(null);\n    setErrorMessage(null);\n    if (selectedUser) {\n      setIsLoadingPosts(true);\n      getPosts(selectedUser?.id)\n        .then(setPostsForView)\n        .catch(() => {\n          setErrorMessage(ErrorValues.LoadingPosts);\n        })\n        .finally(() => {\n          setIsLoadingPosts(false);\n        });\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  usersFromServer={usersFromServer}\n                  setSelectedUser={setSelectedUser}\n                  selectedUser={selectedUser}\n                />\n              </div>\n              <div className=\"block\" data-cy=\"MainContent\">\n                { isLoadingPosts ? <Loader /> : (\n                  <>\n                    { !selectedUser && (\n                      <p data-cy=\"NoSelectedUser\">\n                        No user selected\n                      </p>\n                    )}\n                    {errorMessage && postsForView.length === 0 && (\n                      <div\n                        className=\"notification is-danger\"\n                        data-cy=\"PostsLoadingError\"\n                      >\n                        {errorMessage}\n                      </div>\n                    )}\n                    {selectedUser && !!postsForView.length && (\n                      <PostsList\n                        postsForView={postsForView}\n                        setIsPostOpen={setIsPostOpen}\n                        isPostOpen={isPostOpen}\n                      />\n                    )}\n                    {\n                      selectedUser && !errorMessage && postsForView.length === 0\n                      && (\n                        <div\n                          className=\"notification is-warning\"\n                          data-cy=\"NoPostsYet\"\n                        >\n                          No posts yet\n                        </div>\n                      )\n                    }\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': isPostOpen },\n            )}\n          >\n            {errorMessage === ErrorValues.CommentsError && (\n              <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                {errorMessage}\n              </div>\n            )}\n            {isPostOpen && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  isPostOpen={isPostOpen}\n                  setErrorMessage={setErrorMessage}\n                  errorMessage={errorMessage}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}